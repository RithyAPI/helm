apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nexus.fullname" . | default "nexus" }}
  labels:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: nexus
      app.kubernetes.io/instance: {{ .Release.Name }}

  {{- $stype := (default "Recreate" (index .Values "deploymentStrategy" "type")) }}
  {{- if eq $stype "Recreate" }}
  strategy:
    type: Recreate
  {{- else }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ default 1 (index .Values "deploymentStrategy" "rollingUpdate" "maxUnavailable") }}
      maxSurge:       {{ default 0 (index .Values "deploymentStrategy" "rollingUpdate" "maxSurge") }}
  {{- end }}

  template:
    metadata:
      labels:
        app.kubernetes.io/name: nexus
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup | default 200 }}
        {{- if .Values.securityContext.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.securityContext.fsGroupChangePolicy }}
        {{- end }}

      # Init containers
      {{- $fixPerms := and .Values.persistence.enabled .Values.persistence.fixPermissions -}}
      {{- $cleanLocks := (default true (index .Values "nexus" "cleanupH2Locks")) -}}
      {{- if or $fixPerms $cleanLocks }}
      initContainers:
        {{- if $fixPerms }}
        - name: fix-perms
          image: busybox:1.36
          command:
            - sh
            - -c
            - "mkdir -p {{ .Values.persistence.mountPath }} && chown -R {{ .Values.securityContext.runAsUser | default 200 }}:{{ .Values.securityContext.runAsGroup | default 200 }} {{ .Values.persistence.mountPath }}"
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
        {{- end }}
        {{- if $cleanLocks }}
        - name: cleanup-h2-locks
          image: busybox:1.36
          command:
            - sh
            - -c
            - >
              set -e;
              echo "Cleaning H2 lock files if present...";
              rm -f /nexus-data/lock /nexus-data/db/*.lock /nexus-data/db/*.lck || true;
              echo "Done.";
          volumeMounts:
            - name: data
              mountPath: /nexus-data
        {{- end }}
      {{- end }}

      terminationGracePeriodSeconds: {{ default 120 (index .Values "nexus" "terminationGraceSeconds") }}

      containers:
        - name: nexus
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser | default 200 }}
            runAsGroup: {{ .Values.securityContext.runAsGroup | default 200 }}

          {{- if (index .Values "nexus" "install4jAddVmParams") }}
          env:
            - name: INSTALL4J_ADD_VM_PARAMS
              value: {{ (index .Values "nexus" "install4jAddVmParams") | quote }}
          {{- end }}

          ports:
            - name: http
              containerPort: {{ .Values.ports.ui | default 8081 }}
          {{- if (index .Values "ports" "docker" "enabled") }}
            - name: docker
              containerPort: {{ .Values.ports.docker.port | default 5000 }}
          {{- end }}

          # Startup probe (donâ€™t kill during cold start)
          {{- if (default true (index .Values "probes" "startup" "enabled")) }}
          startupProbe:
            httpGet:
              path: {{ default "/" (index .Values "probes" "startup" "path") }}
              port: {{ .Values.ports.ui | default 8081 }}
            periodSeconds: {{ default 10  (index .Values "probes" "startup" "periodSeconds") }}
            failureThreshold: {{ default 60 (index .Values "probes" "startup" "failureThreshold") }}
          {{- end }}

          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/" }}
              port: {{ .Values.ports.ui | default 8081 }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 90 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 30 }}

          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/" }}
              port: {{ .Values.ports.ui | default 8081 }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 300 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 20 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 10 }}

          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-lc","sleep {{ default 15 (index .Values "nexus" "preStopSleepSeconds") }}"]

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- end }}

      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{ else }}{{ .Values.persistence.claimName }}{{ end }}
        {{- end }}
