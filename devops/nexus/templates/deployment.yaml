apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nexus.fullname" . | default "nexus" }}
  labels:
    app.kubernetes.io/name: nexus
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: nexus
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nexus
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup | default 200 }}
        {{- if .Values.securityContext.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.securityContext.fsGroupChangePolicy }}
        {{- end }}
      {{- if and .Values.persistence.enabled .Values.persistence.fixPermissions }}
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          command: ["sh","-c","mkdir -p {{ .Values.persistence.mountPath }} && chown -R {{ .Values.securityContext.runAsUser | default 200 }}:{{ .Values.securityContext.runAsGroup | default 200 }} {{ .Values.persistence.mountPath }}"]
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
      {{- end }}
      containers:
        - name: nexus
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser | default 200 }}
            runAsGroup: {{ .Values.securityContext.runAsGroup | default 200 }}
          ports:
            - name: nexus-ui
              containerPort: {{ .Values.ports.ui | default 8081 }}
          {{- if .Values.ports.docker.enabled }}
            - name: docker
              containerPort: {{ .Values.ports.docker.port | default 5000 }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/" }}
              port: {{ .Values.ports.ui | default 8081 }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 90 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 30 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/" }}
              port: {{ .Values.ports.ui | default 8081 }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 180 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 20 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 10 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{ else }}{{ .Values.persistence.claimName }}{{ end }}
        {{- end }}
