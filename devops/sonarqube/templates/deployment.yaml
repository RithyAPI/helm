apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sonarqube.fullname" . }}
  labels:
    {{- include "sonarqube.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: Recreate   # community edition -> single replica, avoid overlapping writes
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "sonarqube.serviceAccountName" . }}
      automountServiceAccountToken: {{ default false (index .Values "serviceAccount" "automount") }}

      {{- if .Values.sysctl.setOnInitContainer }}
      initContainers:
        - name: set-sysctl
          image: busybox:1.36
          securityContext:
            privileged: true
          command: ["sh","-c","sysctl -w vm.max_map_count=524288 && sysctl -w fs.file-max=131072"]
      {{- end }}

      containers:
        - name: sonarqube
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          env:
            - name: SONAR_JDBC_URL
              value: "jdbc:postgresql://{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}"
            - name: SONAR_JDBC_USERNAME
              value: "{{ .Values.postgres.username }}"
            - name: SONAR_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "sonarqube.fullname" . }}-db
                  key: POSTGRES_PASSWORD
          {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: 9000
          {{- if (default true (index .Values "probes" "startup" "enabled")) }}
          startupProbe:
            httpGet: { path: /api/system/status, port: http }
            periodSeconds: {{ default 10 (index .Values "probes" "startup" "periodSeconds") }}
            failureThreshold: {{ default 60 (index .Values "probes" "startup" "failureThreshold") }}
          {{- end }}
          readinessProbe:
            httpGet: { path: /api/system/status, port: http }
            initialDelaySeconds: {{ default 60 (index .Values "probes" "readiness" "initialDelaySeconds") }}
            periodSeconds: {{ default 10 (index .Values "probes" "readiness" "periodSeconds") }}
          livenessProbe:
            httpGet: { path: /api/system/status, port: http }
            initialDelaySeconds: {{ default 180 (index .Values "probes" "liveness" "initialDelaySeconds") }}
            periodSeconds: {{ default 20 (index .Values "probes" "liveness" "periodSeconds") }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.paths.data }}
              subPath: data
            - name: data
              mountPath: {{ .Values.paths.extensions }}
              subPath: extensions
            - name: data
              mountPath: {{ .Values.paths.logs }}
              subPath: logs
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{ else }}{{ .Values.persistence.claimName }}{{ end }}
        {{- end }}
