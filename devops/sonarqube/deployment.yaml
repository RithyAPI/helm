apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: { app: sonarqube }
  template:
    metadata:
      labels: { app: sonarqube }
    spec:
      securityContext:
        fsGroup: 0
      initContainers:
        - name: wait-for-db
          image: postgres:15
          command: ["sh","-c"]
          args:
            - |
              echo "Waiting for Postgresâ€¦";
              for i in $(seq 1 60); do
                pg_isready -h postgresql-postgresql.default.svc.cluster.local -p 5432 -d sonarqube -U "$(cat /db/username)" && exit 0
                echo "DB not ready ($i/60)"; sleep 2;
              done
              echo "DB never became ready"; exit 1
          volumeMounts:
            - name: db-secret
              mountPath: /db
              readOnly: true
      containers:
        - name: sonarqube
          image: sonarqube:community
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: SONAR_JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: sonarqube-db
                  key: jdbcUrl
            - name: SONAR_JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: sonarqube-db
                  key: username
            - name: SONAR_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sonarqube-db
                  key: password
          readinessProbe:
            httpGet: { path: /, port: 9000 }
            initialDelaySeconds: 25
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /, port: 9000 }
            initialDelaySeconds: 90
            periodSeconds: 20
          securityContext:
            runAsUser: 1000
            runAsGroup: 0
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: /opt/sonarqube/data
            - name: extensions
              mountPath: /opt/sonarqube/extensions
            - name: logs
              mountPath: /opt/sonarqube/logs
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: sonarqube-data
        - name: extensions
          persistentVolumeClaim:
            claimName: sonarqube-extensions
        - name: logs
          persistentVolumeClaim:
            claimName: sonarqube-logs
        - name: db-secret
          secret:
            secretName: sonarqube-db
            items:
              - key: username
                path: username
