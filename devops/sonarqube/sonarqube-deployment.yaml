apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
  labels: { app: sonarqube }
spec:
  replicas: 1
  strategy:
    type: Recreate   # safer for embedded ES data
  selector:
    matchLabels: { app: sonarqube }
  template:
    metadata:
      labels: { app: sonarqube }
    spec:
      # image expects UID 1000 with root group (gid 0)
      securityContext:
        fsGroup: 0

      # wait for Postgres to be ready
      initContainers:
        - name: wait-for-db
          image: postgres:15
          env:
            - name: DB_HOST
              value: postgres.sonarqube.svc.cluster.local
            - name: DB_NAME
              valueFrom: { secretKeyRef: { name: sonarqube-db, key: database } }
            - name: DB_USER
              valueFrom: { secretKeyRef: { name: sonarqube-db, key: username } }
          command: ["sh","-c"]
          args:
            - |
              echo "Waiting for Postgresâ€¦";
              for i in $(seq 1 60); do
                pg_isready -h "$DB_HOST" -p 5432 -d "$DB_NAME" -U "$DB_USER" && exit 0
                echo "DB not ready ($i/60)"; sleep 2;
              done
              echo "DB never became ready"; exit 1

      containers:
        - name: sonarqube
          image: sonarqube:community
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: SONAR_JDBC_URL
              value: "jdbc:postgresql://postgres.sonarqube.svc.cluster.local:5432/sonarqube?sslmode=disable&currentSchema=public"
            - name: SONAR_JDBC_USERNAME
              valueFrom: { secretKeyRef: { name: sonarqube-db, key: username } }
            - name: SONAR_JDBC_PASSWORD
              valueFrom: { secretKeyRef: { name: sonarqube-db, key: password } }
          readinessProbe:
            httpGet: { path: /, port: 9000 }
            initialDelaySeconds: 25
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /, port: 9000 }
            initialDelaySeconds: 90
            periodSeconds: 20
          securityContext:
            runAsUser: 1000
            runAsGroup: 0
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: /opt/sonarqube/data
            - name: extensions
              mountPath: /opt/sonarqube/extensions
            - name: logs
              mountPath: /opt/sonarqube/logs
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: sonarqube-data }
        - name: extensions
          persistentVolumeClaim: { claimName: sonarqube-extensions }
        - name: logs
          persistentVolumeClaim: { claimName: sonarqube-logs }
