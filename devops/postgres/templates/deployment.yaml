apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pg.fullname" . }}
  labels:
    {{- include "pg.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "pg.serviceAccountName" . }}
      automountServiceAccountToken: {{ default false (index .Values "serviceAccount" "automount") }}

      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup | default 999 }}
        {{- if .Values.securityContext.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.securityContext.fsGroupChangePolicy }}
        {{- end }}

      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgres.db | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgres.user | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pg.secretName" . }}
                  key: {{ default "POSTGRES_PASSWORD" .Values.postgres.existingSecretKey }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: data
            {{- if .Values.initdb.enabled }}
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
            {{- end }}
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: {{ default 10 (index .Values "probes" "readiness" "initialDelaySeconds") }}
            periodSeconds: {{ default 10 (index .Values "probes" "readiness" "periodSeconds") }}
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: {{ default 20 (index .Values "probes" "liveness" "initialDelaySeconds") }}
            periodSeconds: {{ default 10 (index .Values "probes" "liveness" "periodSeconds") }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{ else }}{{ include "pg.fullname" . }}-data{{ end }}
        {{- if .Values.initdb.enabled }}
        - name: initdb
          configMap:
            name: {{ include "pg.fullname" . }}-initdb
        {{- end }}
